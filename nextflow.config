
// old paramters 
params {
/*
    User setting options (mandatory)
     */
// input file and genome reference()
    species="human"// mouse , zebrafish, fly
    fastq_ext = '*_{1,2}.fq.gz'
    fasta_ref = '/data/database/hg38/genome.fa'
    design = 'design.file' // or null
    hisat2_index = '/data/database/hg38/hisatIndex/grch38_snp_tran/genome_snp_tran'
    cpatpath='/opt/CPAT-1.2.3'
    //human gtf only
    gencode_annotation_gtf = "/data/database/hg38/Annotation/gencode.v24.annotation.gtf"
    lncipedia_gtf = "/data/database/hg38/Annotation/lncipedia_4_0_hg38.gtf" // set "null" if you are going to perform analysis on other species
// additional options for non-human species
    known_coding_gtf=""
    known_lncRNA_gtf=""


/*
    User setting options (optional)
     */
    // tools settings
    hisat_strand = 'RF'
    star_index = ''//set if star used
    bowtie2_index = ''//set if tophat used
    aligner = "hisat" // or "star","tophat"
    sam_processor="sambamba"//or "samtools(deprecated)"
    qctools ="fastp"  // or "afterqc","fastp","fastqc","none" to skip qc step
    detools = "edger"//or "deseq2"
    quant = "kallisto"// or 'htseq'

    //other settings
    singleEnd = false
    unstrand = false
    skip_combine = false
    lncRep_Output = 'reporter.html'
    lncRep_theme = 'npg'
    lncRep_cdf_percent = 10
    lncRep_max_lnc_len = 10000
    lncRep_min_expressed_sample = 50
    mem = 60
    cpu = 30
}

manifest {
    homePage = 'https//github.com/likelet/LncPipe'
    description = 'LncPipe:a Nextflow-based Long non-coding RNA analysis PIPELINE'
    mainScript = 'LncRNAanalysisPipe.nf'
}

// individual process setting
process.cache = 'deep'
process {


    withLabel: para {
        maxForks = 6
    }

    withLabel: 'qc' {
        maxForks = 6
    }

}

// use profile 

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  docker {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
  }
  
  singularity {
    includeConfig 'conf/base.config'
    includeConfig 'conf/sing.config'
  }
  
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
